{"version":3,"sources":["../../../projects/ngx-range/src/lib/ngx-range.component.ts","../../../projects/ngx-range/src/lib/ngx-range.module.ts","../../../projects/ngx-range/src/lib/range-validator.ts"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","i0.ɵɵadvance","i0.ɵɵtextInterpolate","NgxRangeComponent","_fb","ngControl","this","id","nextId","valueAccessor","rangeGroup","group","selectFirst","value","selectSecond","Object","defineProperty","prototype","_selectOptions","_value","ngOnInit","_this","valueChanges","pipe","debounceTime","subscribe","formValues","onChange","ngOnDestroy","ngOnChanges","changes","_a","previousValue","_b","currentValue","patchValue","control","errors","writeValue","obj","registerOnChange","fn","registerOnTouched","onTouched","setDisabledState","isDisabled","disable","enable","i0","ɵɵdirectiveInject","i1","FormBuilder","NgControl","selectors","hostVars","hostBindings","rf","ctx","i0.ɵɵtemplate","i0.ɵɵtextInterpolate2","ɵɵpureFunction1","_c0","invalid","Component","selector","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","Self","Optional","HostBinding","selectOptions","Input","NgxRangeModule","imports","FormsModule","ReactiveFormsModule","MatSelectModule","CommonModule","declarations","exports","NgModule","RangeValidators","largerSecond","compare","largerFirst","type","firstValue","secondValue","_c","_d"],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, forwardRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Optional, Self, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormControl, FormGroup, NgControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\ntype selectOptions = { firstOptions: [{ value: unknown, name: string }], secondOptions: [{ value: unknown, name: string }] };\ntype selectValues = { selectFirst: unknown, selectSecond: unknown };\n\n@Component({\n  selector: 'ngx-range',\n  template: `\n   varmı{{\n    rangeGroup.errors?.length\n\n   }}\n\n   {{invalid}}\n   <div role=\"group\" [formGroup]='rangeGroup' [ngClass]=\"{error: invalid}\">\n    <mat-form-field appearance=\"outline\">\n        <mat-select formControlName=\"selectFirst\">\n          <mat-option *ngFor=\"let option of selectOptions.firstOptions\" [value]=\"option.value\">{{option.name}}</mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\" class=\"select-second\">\n        <mat-select formControlName=\"selectSecond\">\n          <mat-option *ngFor=\"let option of selectOptions.secondOptions\" [value]=\"option.value\">{{option.name}}</mat-option>\n        </mat-select>\n      </mat-form-field>\n  </div>\n`,\n  styles: [\n    `div{\n      display: flex;\n    }\n    .select-second{\n      padding-left: 5px;\n    }\n    .error{\n      color: red;\n    }\n    `\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRangeComponent implements OnInit, OnDestroy, ControlValueAccessor, OnChanges {\n\n  static nextId = 0;\n\n  @HostBinding()\n  id = `ngx-range-${NgxRangeComponent.nextId++}`;\n\n  // private _formControlName: string;\n  // @Input()\n  // set formControlName(value) {\n  //   this._formControlName = value;\n  // }\n  // get formControlName() {\n  //   return this._formControlName;\n  // }\n\n  private _selectOptions: selectOptions;\n  @Input()\n  set selectOptions(value) {\n    this._selectOptions = value;\n  }\n  get selectOptions() {\n    return this._selectOptions;\n  }\n\n  private _value: selectValues;\n  @Input()\n  set value(value) {\n    this._value = value;\n  }\n  get value() {\n    return this._value;\n  }\n\n  rangeGroup: FormGroup;\n\n  constructor(private _fb: FormBuilder, @Self() @Optional() public ngControl: NgControl) {\n    if (ngControl !== null) {\n      this.ngControl.valueAccessor = this;\n      this.rangeGroup = this._fb.group({\n        selectFirst: this.ngControl.value,\n        selectSecond: null\n      });\n    }\n\n  }\n\n  onChange;\n  onTouched;\n\n  ngOnInit(): void {\n    this.rangeGroup.valueChanges.pipe(\n      debounceTime(300),\n    ).subscribe(formValues => {\n      if (formValues.selectFirst !== null && formValues.selectSecond !== null) {\n        this.onChange(formValues);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.value?.previousValue !== changes.value?.currentValue) {\n      debugger;\n      this.rangeGroup.patchValue(changes.value.currentValue);\n    }\n  }\n\n  get invalid() {\n    return this.ngControl.control.errors;\n  }\n\n\n  writeValue(obj: any): void {\n    this.value = obj;\n    if (obj?.selectFirst) {\n      this.rangeGroup.patchValue({\n        selectFirst: obj.selectFirst});\n    }\n    if (obj?.selectSecond) {\n      this.rangeGroup.patchValue({\n       selectSecond: obj.selectSecond});\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.rangeGroup.disable() : this.rangeGroup.enable();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxRangeComponent } from './ngx-range.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [NgxRangeComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n    CommonModule\n  ],\n  exports: [NgxRangeComponent]\n})\nexport class NgxRangeModule { }\n","import { AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';\n\nexport class RangeValidators {\n\n    static largerSecond(control: AbstractControl): ValidationErrors | null {\n        return RangeValidators.compare('largerSecond')(control);\n    }\n\n    static largerFirst(control: AbstractControl): ValidationErrors | null {\n        return RangeValidators.compare('largerFirst')(control);\n    }\n\n    static compare(type: string): ValidatorFn {\n        return (control: AbstractControl): ValidationErrors | null => {\n            if (type === 'largerSecond') {\n                debugger;\n                if (control.value?.firstValue > control.value?.secondValue) {\n                    debugger;\n\n                    return { largerSecond: true };\n                }\n            } else if (type === 'largerFirst') {\n                if (control.value?.secondValue > control.value?.firstValue) {\n                    return { largerFirst: true };\n                }\n            }\n            return null;\n        };\n    }\n}\n"]}